var po = org.polymaps;

var map = po.map()
    .container(document.getElementById("map").appendChild(po.svg("svg")))
    .center({lat: 37.787, lon: -122.228})
    .zoom(13)
    .zoomRange([12, 14]);

map.add(po.image()
    .url(po.url("http://{S}tile.cloudmade.com"
    + "/1a1b06b230af4efdbb989ea99e9841af" // http://cloudmade.com/register
    + "/20760/256/{Z}/{X}/{Y}.png")
    .hosts(["a.", "b.", "c.", ""])));

//The variables for the display
  //TODO this has to be furnished by scala ! 
  //We expect {"clusters": [{"centers": [{"x":_, "y":_, "r":_}]}]} where all vars are in geoCoordinates
var rawData = JSON.parse('{"coucou": 1}');
  //TODO this has to be generated by calling the correct method!
var data = JSON.parse('{"clusters":[{"centers": [{ "x": 250, "y": 40, "r": 10 }, { "x": 40, "y": 75, "r": 43 }]}, {"centers": [{ "x": 759, "y": 255, "r": 36 }]}, {"centers": [{ "x": 50, "y": 40, "r": 10 }, { "x": 60, "y": 20, "r": 10 }]}, {"centers": [{ "x": 133, "y": 54, "r": 12 }, { "x": 40, "y": 75, "r": 43 }]}, {"centers":[{ "x": 260, "y": 120, "r": 10 }, { "x": 40, "y": 75, "r": 13 }, { "x": 33, "y": 54, "r": 12 }]}]}');

  //Graphical environnement
var graph = document.getElementById("map").getElementsByTagName("svg")[0].appendChild(po.svg("g"));

//Translating function 
  /*@brief: Transforms the raw data in pixels
    @expects: [{x, y, r}, {x,y,r}...]
  */
function generateData(centers){
  var res = [];
  for(var i = 0; i < centers.length; i++) {
    var e = centers[i], copy = e;
    copy.y = copy.y + copy.r;
    var toPix = geoToPix(e), nR = Math.abs(geoToPix(copy).y - toPix.y);
    res.push(JSON.parse('{"x":'+toPix.x+', "y":'+toPix.y+', "r": '+nR+'}'));
  }
  return res;
}

//Functions to draw
  //Expects input of the form {"x": _, "y": _, "r": _}
function drawCircle(entry) {
  var point = graph.appendChild(po.svg("circle")); 
  point.setAttribute("cx", entry.x);
  point.setAttribute("cy", entry.y);
  point.setAttribute("r", entry.r);
}

  //Goes through the list of centers at one level
function drawCenters(clusts){
  for(var i = 0; i < clusts.length; i++) {
    drawCircle(clusts[i]);
  }
}


//Helper functions
  //Translates pixels {"x": _, "y":_, "r":_ } into geolocation 
  //using only the x and y attribute; Returns {"lat":_, "lon":_}
function pxToGeo(pt){
  return map.pointLocation(JSON.parse('{"x":'+ pt.x+', "y": '+pt.y+'}'));
}

  //Translates geolocation {"lat": _, "lon":_} into pixel {"x":_, "y": _}
function geoToPix(pt){
  return map.locationPoint(JSON.parse('{ "lat":'+pt.x+', "lon": '+pt.y+'}'));
}


//TEST to check everything works

  //Tests Draw circle
/*for(var i = 0; i < data.clusters[1].centers.length; i ++){
  var entry = data.clusters[1].centers[i];
  console.log("The shit I'm doing "+ entry.x + " The shit you do "+entry.y +" da fuck? "+entry.r);
  drawCircle(entry);
}*/

  //Tests drawCenters
//drawCenters(data.clusters[2].centers);
  
  //Tests geoToPix
var res = geoToPix('{"lat": 37.787, "lon": -122.228}');
console.log("The x: "+res.x+" the y: "+res.y);
console.log("I'm here, I'm clear");

