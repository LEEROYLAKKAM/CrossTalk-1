//var po = org.polymaps;

//var map = po.map()
    //.container(document.getElementById("map").appendChild(po.svg("svg")))
    map.center({lat: 37.787, lon: -122.228})
    .zoom(3)
    .zoomRange([3, 10]);
map.on("move", update2);

//The variables for the display
  //TODO this has to be furnished by scala !
  //Maybe even 3 different lists actually ... nope ?
  //We expect {"clusters": [{"centers": [{"x":_, "y":_, "r":_}]}]} where all vars are in geoCoordinates

/*var rawData = JSON.parse('{"clusters": [{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60},{"x": 46.5198, "y": 6.6335, "r": 46.190}, {"x": 37.787, "y": -121.228, "r": 37.60}, {"x": 37.8, "y": -122.228, "r": 37.90}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]},{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]}]}');*/
var testData = JSON.parse('{"centers": [{"x": 37.787, "y": -122.228, "r": 37.60}]}')
var rawData1 = {"clusters": [testData, testData, testData, testData, testData, testData, testData, testData, testData, testData]};
var rawData2 = rawData1
var rawData3 = rawData1
  //TODO this has to be generated by calling the correct method!
var data = JSON.parse('{"clusters":[{"centers": [{ "x": 250, "y": 40, "r": 10 }, { "x": 40, "y": 75, "r": 43 }]}, {"centers": [{ "x": 759, "y": 255, "r": 36 }]}, {"centers": [{ "x": 50, "y": 40, "r": 10 }, { "x": 60, "y": 20, "r": 10 }]}, {"centers": [{ "x": 133, "y": 54, "r": 12 }, { "x": 40, "y": 75, "r": 43 }]}, {"centers":[{ "x": 260, "y": 120, "r": 10 }, { "x": 40, "y": 75, "r": 13 }, { "x": 33, "y": 54, "r": 12 }]}]}');

  //Graphical environnement
var graph = document.getElementById("map").getElementsByTagName("svg")[0].appendChild(po.svg("g"));


function cluster(view_center, zoom, data) {
  rawData1 = JSON.parse(data); update2();
  if(view_center) map.center(view_center);
  if(zoom) map.zoom(zoom);
}
//Translating function 
  /*@brief: Transforms the raw data in pixels
    @expects: [{x, y, r}, {x,y,r}...]
  */
function generateData(centers){
  var res = [];
  for(var i = 0; i < centers.length; i++) {
    var e = centers[i];
    var bitch = JSON.parse('{"x": '+e.r+', "y": '+e.y+'}');
    var border = geoToPx(bitch);
    var toPix = geoToPx(e);
    var diff = border.y - toPix.y;
    var nR = Math.abs(border.y - toPix.y);
    
    res.push(JSON.parse('{"x":'+toPix.x+', "y":'+toPix.y+', "r": '+nR+'}'));
    
  }
  return res;
}

//Functions to draw
  //Expects input of the form {"x": _, "y": _, "r": _}
var colors = ["", "LightCoral", "RoyalBlue", "Purple"]
function drawCircle(entry, colorID) {
  console.log("color here: "+colorID)
  var point = graph.appendChild(po.svg("circle"));
  console.log("chingjjv"+colorID)
  point.setAttribute('style', 'fill:'+ colors[colorID] +"; "+point.getAttribute("fill"));
  point.setAttribute('style', 'opacity:'+Math.random()/3/*entry.d*/+"; "+point.getAttribute("style"));
  point.setAttribute("cx", entry.x);
  point.setAttribute("cy", entry.y);
  point.setAttribute("r", entry.r);
}

  //Goes through the list of centers at one level
function drawCenters(clusts, colorID){
  console.log("color: "+colorID)
  for(var i = 0; i < clusts.length; i++) {
    console.log("color: "+colorID)
    drawCircle(clusts[i], colorID);
  }
}


//Helper functions
  //Translates pixels {"x": _, "y":_, "r":_ } into geolocation 
  //using only the x and y attribute; Returns {"lat":_, "lon":_}
function pxToGeo(pt){
  return map.pointLocation(JSON.parse('{"x":'+ pt.x+', "y": '+pt.y+'}'));
}

  //Translates geolocation {"lat": _, "lon":_} into pixel {"x":_, "y": _}
function geoToPx(pt){
  //Trouble parsing here
  return map.locationPoint(JSON.parse('{ "lat":'+pt.x+', "lon": '+pt.y+'}'));
}

function update2() {
  //custers: 0 (more details) ->  9
  //zoom level:  3 (far zoom) -> 10
  while(graph.firstChild){
    graph.removeChild(graph.firstChild);
  }
  drawCenters(generateData(rawData1.clusters[10 - Math.floor(map.zoom())].centers), 1);
  drawCenters(generateData(rawData2.clusters[10 - Math.floor(map.zoom())].centers), 2);
  drawCenters(generateData(rawData3.clusters[10 - Math.floor(map.zoom())].centers), 3);
}


  //Tests drawCenters
drawCenters(generateData(rawData1.clusters[0].centers), 1);
  
  //Tests
var res = geoToPx(JSON.parse('{"x": 37.787, "y": -122.228}'));
var res2 = geoToPx(JSON.parse('{"x": 37.787, "y": -132.228}'));
//var res2 = pxToGeo(JSON.parse('{"x": 758.9, "y": 160}'));
console.log("The x: "+res.x+" the y: "+res.y);
console.log("The x2:"+res2.x+" the y2 "+res2.y);

//drawCircle(JSON.parse('{"x": 0, "y": 300, "r": 30}'))

