# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="C;0q92q[4^3p@HW0btDBCR<qTeaH<adyJtOv6gFnU2s4]lx8>TV[TCDC1egyNVHR"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Personalized configuration settings
# ~~~~~
# Keys for Twitter

twitter.nbKeys = 3

twitter.k0.consumerKey = "pjc4NI7o716dIB9GZprwQ"
twitter.k0.consumerSecret = "hRt9cqycdxs1VHmYLy0tgyOQyUPqQ9jaWpy8Oj7I"
twitter.k0.accessToken = "97033937-37pmIh0wgFoM6Yt6R9Adg43I2wka1WuolBwRXbfS4"
twitter.k0.accessTokenSecret = "fR73AeZCY0U88VOWihtMa3c3Pg0bqs9nUDTwgI11EmIEq"

twitter.k1.consumerKey = "MJjNJ6XuE8zyhLWMROgQ"
twitter.k1.consumerSecret = "L9bVGiOtbrSVchKiSPpWF0pVmIs231k6Sf3oxP9Kuc"
twitter.k1.accessToken = "1214576448-nVLmPGMPcMOeX8ni4rzB8osqOvleEd0K4efJ7kM"
twitter.k1.accessTokenSecret = "yOnIODgxD73iLyS7cD2qMfiZRGoxpVf94k07e9a0fqyUe"

twitter.k2.consumerKey = "NA2zKztTwpe6WMXkDr1Bg"
twitter.k2.consumerSecret = "wtDSyMRFyFZp8YilTr9mVuRlcViAb4pXxxKPUGDUmM"
twitter.k2.accessToken = "1214576448-YLOXi7hvxI8RoeOFNDwmjp1fvKQ3dh5Qm2okSHx"
twitter.k2.accessTokenSecret = "ybQxjoIP9Ubl8ZDt6SNiDDI6AN1RtL9b1Kidbv41BbwuL"

# Period between two connections to the Twitter API (seconds)
tweetManager.period = 5

# Bound on the number of searchers (i.e. AkkaActors) the manager can start
tweetManager.searcherBound = 25

# Time to wait in case of refusal from the API (seconds)
tweetManager.waitOnRefusal = 60

# Time to wait before starting exploring the buffer again of the TweetStreamer
tweetStreamer.waitToExplore = 3

# Personalization for the HC Clustering Algorithm
# ~~~~~
clustHC.areaCorrector = 0.2
clustHC.thresholdCorrector = 0.3
clustHC.minDensityCorrector = 0.1

#Personalization for the Slic Clustering Algorithm
# ~~~~~
clustSlic.sigma = 1.0 / 8.0
clustSlic.low_threshold = 0.01
clustSlic.alpha = 0.0003

# Akka configuration
# ~~~~~
# Setup larger timeout, required by the TweetManager
 akka.logger-startup-timeout = 25s
 akka.actor.retrieveBodyParserTimeout = 25s
